// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using final_project;

namespace final_project.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("final_project.Models.Entities.Category", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("parent_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("parent_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("final_project.Models.Entities.Check_paid_shop", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date_expired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_paid")
                        .HasColumnType("datetime2");

                    b.Property<int>("money")
                        .HasColumnType("int");

                    b.Property<string>("shop_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("shop_id")
                        .IsUnique()
                        .HasFilter("[shop_id] IS NOT NULL");

                    b.ToTable("Check_paid_shop");
                });

            modelBuilder.Entity("final_project.Models.Entities.Color", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("final_project.Models.Entities.Comment", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("final_project.Models.Entities.Order", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date_create")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_paid")
                        .HasColumnType("datetime2");

                    b.Property<string>("payment_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reciever_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("payment_id")
                        .IsUnique()
                        .HasFilter("[payment_id] IS NOT NULL");

                    b.HasIndex("reciever_id")
                        .IsUnique()
                        .HasFilter("[reciever_id] IS NOT NULL");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("final_project.Models.Entities.Order_detail", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("color_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("order_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("size_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("color_id")
                        .IsUnique()
                        .HasFilter("[color_id] IS NOT NULL");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.HasIndex("size_id")
                        .IsUnique()
                        .HasFilter("[size_id] IS NOT NULL");

                    b.ToTable("Order_details");
                });

            modelBuilder.Entity("final_project.Models.Entities.Payment_method", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Payment_methods");
                });

            modelBuilder.Entity("final_project.Models.Entities.Picture", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("final_project.Models.Entities.Product", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cat_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("product_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("shop_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("cat_id");

                    b.HasIndex("shop_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("final_project.Models.Entities.Reciever", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("order_id");

                    b.ToTable("Recievers");
                });

            modelBuilder.Entity("final_project.Models.Entities.Shop", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payment_accont")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("user_id")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("final_project.Models.Entities.Size", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("final_project.Models.Entities.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("user_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("final_project.Models.Entities.Category", b =>
                {
                    b.HasOne("final_project.Models.Entities.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("parent_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Check_paid_shop", b =>
                {
                    b.HasOne("final_project.Models.Entities.Shop", "Shop")
                        .WithOne("Check_Paid_Shop")
                        .HasForeignKey("final_project.Models.Entities.Check_paid_shop", "shop_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Comment", b =>
                {
                    b.HasOne("final_project.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("final_project.Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Order", b =>
                {
                    b.HasOne("final_project.Models.Entities.Payment_method", "Payment_Method")
                        .WithOne("Order")
                        .HasForeignKey("final_project.Models.Entities.Order", "payment_id");

                    b.HasOne("final_project.Models.Entities.Reciever", "Reciever")
                        .WithOne()
                        .HasForeignKey("final_project.Models.Entities.Order", "reciever_id");

                    b.HasOne("final_project.Models.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Order_detail", b =>
                {
                    b.HasOne("final_project.Models.Entities.Color", "Color")
                        .WithOne("Order_Detail")
                        .HasForeignKey("final_project.Models.Entities.Order_detail", "color_id");

                    b.HasOne("final_project.Models.Entities.Order", "Order")
                        .WithMany("Order_Details")
                        .HasForeignKey("order_id");

                    b.HasOne("final_project.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("final_project.Models.Entities.Size", "Size")
                        .WithOne("Order_Detail")
                        .HasForeignKey("final_project.Models.Entities.Order_detail", "size_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Picture", b =>
                {
                    b.HasOne("final_project.Models.Entities.Product", "Product")
                        .WithMany("Pictures")
                        .HasForeignKey("product_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Product", b =>
                {
                    b.HasOne("final_project.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("cat_id");

                    b.HasOne("final_project.Models.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("shop_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Reciever", b =>
                {
                    b.HasOne("final_project.Models.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("order_id");
                });

            modelBuilder.Entity("final_project.Models.Entities.Shop", b =>
                {
                    b.HasOne("final_project.Models.Entities.User", "User")
                        .WithOne("Shop")
                        .HasForeignKey("final_project.Models.Entities.Shop", "user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
